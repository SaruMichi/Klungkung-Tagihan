/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.dtaxintegration.entity.payment;

/**
 *
 * @author dimata005
 */
import java.sql.*;
import com.dimata.util.lang.I_Language;
import com.dimata.qdep.db.*;
import com.dimata.qdep.entity.*;
import com.dimata.util.Command;
import java.util.Vector;

public class PstPaymentRetribusi extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {

    public static final String TBL_PAYMENTRETRIBUSI = "PEMBAYARAN_RETRIBUSI_BANK";
    public static final int FLD_IDRETRIBUSI = 0;
    public static final int FLD_IDPAYMENTBANK = 1;
    public static final int FLD_NAMA = 2;
    public static final int FLD_NOREKENING = 3;
    public static final int FLD_TANGGALTAGIHAN = 4;
    public static final int FLD_JUMLAHTAGIHAN = 5;
    public static final int FLD_STATUSREVERSAL = 6;
    public static final int FLD_TANGGALPEMBAYARAN = 7;
    public static final int FLD_ID_KEY = 8;
    public static final int FLD_ID_REKAM = 9;
    public static final int FLD_TAHUN = 10;
    public static final int FLD_MASA_PAJAK = 11;
    public static final int FLD_POKOK = 12;
    public static final int FLD_DENDA = 13;
    public static String[] fieldNames = {
        "ID_RETRIBUSI",
        "ID_PAYMENT_BANK",
        "NAMA_PENYETOR",
        "NPWRD",
        "TGL_SSPD",
        "JUMLAH",
        "STATUS_REVERSAL",
        "TGL_REKAM",
        "ID_KEY",
        "ID_REKAM",
        "TAHUN_PAJAK",
        "MASA_PAJAK",
        "POKOK",
        "DENDA"
    };
    public static int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_DATE,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_FLOAT,
        TYPE_FLOAT
    };

    public PstPaymentRetribusi() {
    }

    public PstPaymentRetribusi(int i) throws DBException {
        super(new PstPaymentRetribusi());
    }

    public PstPaymentRetribusi(String sOid) throws DBException {
        super(new PstPaymentRetribusi(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstPaymentRetribusi(long lOid) throws DBException {
        super(new PstPaymentRetribusi(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_PAYMENTRETRIBUSI;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstPaymentRetribusi().getClass().getName();
    }

    public static PaymentRetribusi fetchExc(long oid) throws DBException {
        try {
            
            PaymentRetribusi entPaymentRetribusi = new PaymentRetribusi();
            PstPaymentRetribusi pstPaymentRetribusi = new PstPaymentRetribusi(oid);
            entPaymentRetribusi.setOID(oid);
            entPaymentRetribusi.setIdPaymentBank(pstPaymentRetribusi.getLong(FLD_IDPAYMENTBANK));
            entPaymentRetribusi.setNama(pstPaymentRetribusi.getString(FLD_NAMA));
            entPaymentRetribusi.setNoRekening(pstPaymentRetribusi.getString(FLD_NOREKENING));
            entPaymentRetribusi.setTanggalTagihan(pstPaymentRetribusi.getDate(FLD_TANGGALTAGIHAN));
            entPaymentRetribusi.setJumlahTagihan(pstPaymentRetribusi.getdouble(FLD_JUMLAHTAGIHAN));
            entPaymentRetribusi.setStatusReversal(pstPaymentRetribusi.getInt(FLD_STATUSREVERSAL));
            entPaymentRetribusi.setTanggalPembayaran(pstPaymentRetribusi.getDate(FLD_TANGGALPEMBAYARAN));
            entPaymentRetribusi.setIdKey(pstPaymentRetribusi.getString(FLD_ID_KEY));
            entPaymentRetribusi.setIdRekam(pstPaymentRetribusi.getString(FLD_ID_REKAM));
            entPaymentRetribusi.setTahun(pstPaymentRetribusi.getString(FLD_TAHUN));
            entPaymentRetribusi.setMasaPajak(pstPaymentRetribusi.getString(FLD_MASA_PAJAK));
            entPaymentRetribusi.setPokok(pstPaymentRetribusi.getdouble(FLD_POKOK));
            entPaymentRetribusi.setDenda(pstPaymentRetribusi.getdouble(FLD_DENDA));
            
            return entPaymentRetribusi;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPaymentRetribusi(0), DBException.UNKNOWN);
        }
    }

    public long fetchExc(Entity entity) throws Exception {
        PaymentRetribusi entPaymentRetribusi = fetchExc(entity.getOID());
        entity = (Entity) entPaymentRetribusi;
        return entPaymentRetribusi.getOID();
    }

    public static synchronized long updateExc(PaymentRetribusi entPaymentRetribusi) throws DBException {
        try {
            if (entPaymentRetribusi.getOID() != 0) {
                
                PstPaymentRetribusi pstPaymentRetribusi = new PstPaymentRetribusi(entPaymentRetribusi.getOID());
                pstPaymentRetribusi.setLong(FLD_IDPAYMENTBANK, entPaymentRetribusi.getIdPaymentBank());
                pstPaymentRetribusi.setString(FLD_NAMA, entPaymentRetribusi.getNama());
                pstPaymentRetribusi.setString(FLD_NOREKENING, entPaymentRetribusi.getNoRekening());
                pstPaymentRetribusi.setDate(FLD_TANGGALTAGIHAN, entPaymentRetribusi.getTanggalTagihan());
                pstPaymentRetribusi.setDouble(FLD_JUMLAHTAGIHAN, entPaymentRetribusi.getJumlahTagihan());
                pstPaymentRetribusi.setInt(FLD_STATUSREVERSAL, entPaymentRetribusi.getStatusReversal());
                pstPaymentRetribusi.setDate(FLD_TANGGALPEMBAYARAN, entPaymentRetribusi.getTanggalPembayaran());
                pstPaymentRetribusi.setString(FLD_ID_KEY, entPaymentRetribusi.getIdKey());
                pstPaymentRetribusi.setString(FLD_ID_REKAM, entPaymentRetribusi.getIdRekam());
                pstPaymentRetribusi.setString(FLD_TAHUN,  entPaymentRetribusi.getTahun());
                pstPaymentRetribusi.setString(FLD_MASA_PAJAK, entPaymentRetribusi.getMasaPajak());
                pstPaymentRetribusi.setDouble(FLD_DENDA, entPaymentRetribusi.getDenda());
                pstPaymentRetribusi.setDouble(FLD_POKOK, entPaymentRetribusi.getPokok());
                pstPaymentRetribusi.update();
                return entPaymentRetribusi.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPaymentRetribusi(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public long updateExc(Entity entity) throws Exception {
        return updateExc((PaymentRetribusi) entity);
    }

    public static synchronized long deleteExc(long oid) throws DBException {
        try {
            PstPaymentRetribusi pstPaymentRetribusi = new PstPaymentRetribusi(oid);
            pstPaymentRetribusi.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPaymentRetribusi(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public long deleteExc(Entity entity) throws Exception {
        if (entity == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(entity.getOID());
    }

    public static synchronized long insertExc(PaymentRetribusi entPaymentRetribusi) throws DBException {
        try {
            
            PstPaymentRetribusi pstPaymentRetribusi = new PstPaymentRetribusi(0);
            pstPaymentRetribusi.setLong(FLD_IDPAYMENTBANK, entPaymentRetribusi.getIdPaymentBank());
            pstPaymentRetribusi.setString(FLD_NAMA, entPaymentRetribusi.getNama());
            pstPaymentRetribusi.setString(FLD_NOREKENING, entPaymentRetribusi.getNoRekening());
            pstPaymentRetribusi.setDate(FLD_TANGGALTAGIHAN, entPaymentRetribusi.getTanggalTagihan());
            pstPaymentRetribusi.setDouble(FLD_JUMLAHTAGIHAN, entPaymentRetribusi.getJumlahTagihan());
            pstPaymentRetribusi.setInt(FLD_STATUSREVERSAL, entPaymentRetribusi.getStatusReversal());
            pstPaymentRetribusi.setDate(FLD_TANGGALPEMBAYARAN, entPaymentRetribusi.getTanggalPembayaran());
            pstPaymentRetribusi.setString(FLD_ID_KEY, entPaymentRetribusi.getIdKey());
            pstPaymentRetribusi.setString(FLD_ID_REKAM, entPaymentRetribusi.getIdRekam());
            pstPaymentRetribusi.setString(FLD_TAHUN,  entPaymentRetribusi.getTahun());
            pstPaymentRetribusi.setString(FLD_MASA_PAJAK, entPaymentRetribusi.getMasaPajak());
            pstPaymentRetribusi.setDouble(FLD_DENDA, entPaymentRetribusi.getDenda());
            pstPaymentRetribusi.setDouble(FLD_POKOK, entPaymentRetribusi.getPokok());
            
            pstPaymentRetribusi.insert();
            entPaymentRetribusi.setOID(pstPaymentRetribusi.getlong(FLD_IDRETRIBUSI));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPaymentRetribusi(0), DBException.UNKNOWN);
        }
        return entPaymentRetribusi.getOID();
    }

    public long insertExc(Entity entity) throws Exception {
        return insertExc((PaymentRetribusi) entity);
    }

    public static void resultToObject(ResultSet rs, PaymentRetribusi entPaymentRetribusi) {
        try {
            
            entPaymentRetribusi.setOID(rs.getLong(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_IDRETRIBUSI]));
            entPaymentRetribusi.setIdPaymentBank(rs.getLong(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_IDPAYMENTBANK]));
            entPaymentRetribusi.setNama(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_NAMA]));
            entPaymentRetribusi.setNoRekening(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_NOREKENING]));
            entPaymentRetribusi.setTanggalTagihan(rs.getDate(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_TANGGALTAGIHAN]));
            entPaymentRetribusi.setJumlahTagihan(rs.getDouble(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_JUMLAHTAGIHAN]));
            entPaymentRetribusi.setStatusReversal(rs.getInt(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_STATUSREVERSAL]));
            entPaymentRetribusi.setTanggalPembayaran(rs.getDate(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_TANGGALPEMBAYARAN]));
            entPaymentRetribusi.setIdKey(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_ID_KEY]));
            entPaymentRetribusi.setIdRekam(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_ID_REKAM]));
            entPaymentRetribusi.setTahun(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_TAHUN]));
            entPaymentRetribusi.setMasaPajak(rs.getString(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_MASA_PAJAK]));
            entPaymentRetribusi.setPokok(rs.getDouble(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_POKOK]));
            entPaymentRetribusi.setDenda(rs.getDouble(PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_DENDA]));
            
        } catch (Exception e) {
        }
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_PAYMENTRETRIBUSI;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                PaymentRetribusi entPaymentRetribusi = new PaymentRetribusi();
                resultToObject(rs, entPaymentRetribusi);
                lists.add(entPaymentRetribusi);
            }
            rs.close();
            return lists;
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    public static Vector listSum(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(POKOK) AS POKOK, SUM(DENDA) AS DENDA, SUM(JUMLAH) AS JUMLAH FROM " + TBL_PAYMENTRETRIBUSI;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                PaymentRetribusi entPaymentRetribusi = new PaymentRetribusi();
                entPaymentRetribusi.setPokok(rs.getDouble("POKOK"));
                entPaymentRetribusi.setDenda(rs.getDouble("DENDA"));
                entPaymentRetribusi.setJumlahTagihan(rs.getDouble("JUMLAH"));
                lists.add(entPaymentRetribusi);
            }
            rs.close();
            return lists;
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static boolean checkOID(long entPaymentRetribusiId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_PAYMENTRETRIBUSI + " WHERE "
                    + PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_IDRETRIBUSI] + " = " + entPaymentRetribusiId;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstPaymentRetribusi.fieldNames[PstPaymentRetribusi.FLD_IDRETRIBUSI] + ") FROM " + TBL_PAYMENTRETRIBUSI;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static int findLimitStart(long oid, int recordToGet, String whereClause, String orderClause) {
        int size = getCount(whereClause);
        int start = 0;
        boolean found = false;
        for (int i = 0; (i < size) && !found; i = i + recordToGet) {
            Vector list = list(i, recordToGet, whereClause, orderClause);
            start = i;
            if (list.size() > 0) {
                for (int ls = 0; ls < list.size(); ls++) {
                    PaymentRetribusi entPaymentRetribusi = (PaymentRetribusi) list.get(ls);
                    if (oid == entPaymentRetribusi.getOID()) {
                        found = true;
                    }
                }
            }
        }
        if ((start >= size) && (size > 0)) {
            start = start - recordToGet;
        }
        return start;
    }

    public static int findLimitCommand(int start, int recordToGet, int vectSize) {
        int cmd = Command.LIST;
        int mdl = vectSize % recordToGet;
        vectSize = vectSize + (recordToGet - mdl);
        if (start == 0) {
            cmd = Command.FIRST;
        } else {
            if (start == (vectSize - recordToGet)) {
                cmd = Command.LAST;
            } else {
                start = start + recordToGet;
                if (start <= (vectSize - recordToGet)) {
                    cmd = Command.NEXT;
                    System.out.println("next.......................");
                } else {
                    start = start - recordToGet;
                    if (start > 0) {
                        cmd = Command.PREV;
                        System.out.println("prev.......................");
                    }
                }
            }
        }
        return cmd;
    }
}
